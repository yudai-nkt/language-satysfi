scopeName: "source.satysfi"
name: "SATySFi"
fileTypes: [
  "saty",
  "satyh"
]
patterns: [
  {
    include: "#commentState"
  }
  {
    include: "#literalState"
  }
  {
    include: "#markup"
  }
  {
    # The program layer seems to have a dedicated file extension "satyh"
    # althoguh I'm not familiar with the language spec.
    # This program repository might be migrated into another CSON in the future.
    include: "#program"
  }
]
repository:
  commentState:
    match: "(%).*"
    captures:
      0:
        name: "comment.line.percentage.satysfi"
      1:
        name: "punctuation.definition.comment.satysfi"
  literalState:
    begin: "(`+)\\s*"
    beginCaptures:
      1:
        name: "punctuation.definition.string.begin.satysfi"
    end: "\\s*(\\1)"
    endCaptures:
      1:
        name: "punctuation.definition.string.end.satysfi"
    contentName: "string.quoted.grave-sccent.satysfi"
  program:
    patterns: [
      {
        include: "#operator"
      }
      {
        include: "#primitiveInline"
      }
      {
        include: "#primitiveBlock"
      }
      {
        include: "#primitiveContext"
      }
      {
        include: "#primitiveMath"
      }
      {
        include: "#primitiveImage"
      }
      {
        include: "#primitiveGraphic"
      }
      {
        include: "#primitiveType"
      }
    ]
  primitiveType:
    match: "\\b(unit|bool|int|float|length|string|inline-(?:text|boxes))\\b"
    name: "storage.type.primitive.satysfi"
  operator:
    patterns: [
      {
        match: "(\\+|-)\\."
        name: "keyword.operator.arithmetic.float.satysfi"
      }
      {
        match: "(\\+|-|\\*|/)'"
        name: "keyword.operator.arithmetic.length.satysfi"
      }
      {
        match: "(<|>)'"
        name: "keyword.operator.comparison.length.satysfi"
      }
      {
        match: "\\+{3}"
        name: "keyword.operator.bond.block.satysfi"
      }
      {
        match: "\\+{2}"
        name: "keyword.operator.bond.inline.satysfi"
      }
      {
        match: "(\\+|-|\\*|/|mod)"
        name: "keyword.operator.arithmetic.int.satysfi"
      }
      {
        match: "((?:<|=|>)=|<>|<|>)"
        name: "keyword.operator.comparison.int.satysfi"
      }
      {
        match: "(&&|\\|\\||not)"
        name: "keyword.operator.logical.satysfi"
      }
      {
        match: "\\^"
        name: "keyword.operator.concatenation.string.satysfi"
      }
      {
        match: "(arabic|string-unexplode)"
        name: "support.function.builtin.satysfi"
      }
      {
        match: "(string-(?:same|sub|length))"
        name: "invalid.deprecated.string.satysfi"
      }
    ]
  primitiveInline:
    match: "(read-inline|inline-(?:skip|glue|fill|nil|graphics|frame-(?:inner|outer|breakable))|embed-(?:string|math|block-(?:top|bottom))|discretionary|script-guard|get-natural-width|line-stack-(?:top|bottom))"
    name: "support.function.builtin.inline.satysfi"
  primitiveBlock:
    match: "(read-block|line-break|form-document|block-(?:nil|frame-breakable))"
    name: "support.function.builtin.block.satysfi"
  primitiveContext:
    match: "((?:set|get)-(?:font-size|language|dominant-(?:narrow|wide)-script)|set-(?:space-ratio|(?:math-)?font|text-color|leading|manual-rising)|get-text-width)"
    name: "support.function.builtin.context.satysfi"
  primitiveMath:
    match: "(math-(?:(?:big-)?char(?:-with-kern)?|sup|sub|upper|lower|frac|radical|paren|variant-char|color|char-class)|text-in-math)"
    name: "support.function.builtin.math.satysfi"
  primitiveImage:
    match: "(load-(?:pdf-)?image|use-image-by-width)"
    name: "support.function.builtin.image.satysfi"
  primitiveGraphic:
    match: "(start-path|(?:line|bezier)-to|close-with-(?:line|bezier)|(?:terminate|unite)-path|fill|stroke|draw-text)"
    name: "support.function.builtin.graphic.satysfi"
  markup:
    patterns: [
      {
        include: "#packageLoading"
      }
      {
        # This will be divided into several parts with more comprehensive names
        # once I get familiar with the grammar.
        include: "#misc"
      }
    ]
  packageLoading:
    match: "@(import|require):"
    name: "keyword.control.$1.satysfi"
  misc:
    patterns: [
      {
        begin: "(document)\\s+\\(\\|"
        beginCaptures:
          1:
            name: "keyword.other.document.satysfi"
        end: "\\|\\)"
        patterns: [
          {
            match: "(title|author)\\s*(=)\\s*(.+);"
            captures:
              1:
                name: "keyword.other.document-metadata.$1.satysfi"
              2:
                name: "punctuation.separator.key-value.satysfi"
          }
          {
            match: "(show-(?:title|toc))\\s*(=)\\s*(true|false);"
            captures:
              1:
                name: "keyword.other.document-metadata.$1.satysfi"
              2:
                name: "punctuation.separator.key-value.satysfi"
              3:
                name: "constant.language.boolean.$3.satysfi"
          }
        ]
      }
      {
        begin: "{"
        beginCaptures:
          0:
            name: "punctuation.definition.argument.inline-direction.begin.satysfi"
        end: "}"
        endCaptures:
          0:
            name: "punctuation.definition.argument.inline-direction.end.satysfi"
      }
      {
        begin: "(\\+(section))\\s*(?:\\?:\\(`(.*?)`\\))?\\s*{.*?}(<)"
        beginCaptures:
          1:
            name: "markup.heading.$2.satysfi"
          3:
            name: "constant.other.label.satysfi"
          4:
            name: "punctuation.definition.argument.block-direction.begin.satysfi"
        end: ">"
        endCaptures:
          0:
            name: "punctuation.definition.argument.block-direction.end.satysfi"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        begin: "(\\+pn?)({)"
        beginCaptures:
          1:
            name: "support.other.paragraph.satysfi"
          2:
            name: "punctuation.definition.argument.inline-direction.begin.satysfi"
        end: "}"
        endCaptures:
          0:
            name: "punctuation.definition.argument.inline-direction.end.satysfi"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        begin: "(\\+listing)({)"
        beginCaptures:
          1:
            name: "support.other.listing.itemize.satysfi"
          2:
            name: "punctuation.definition.argument.inline-direction.begin.satysfi"
        end: "}"
        endCaptures:
          0:
            name: "punctuation.definition.argument.inline-direction.end.satysfi"
        patterns: [
          {
            match: "^\\s*(\\*+)\\s+"
            captures:
              1:
                name: "variable.unordered.list.satysfi"
          }
          {
            include: "$self"
          }
        ]
      }
    ]
